---
import { getLangFromUrl } from '../i18n/utils';
import { Toast, Icon } from 'webcoreui/astro';

const lang = getLangFromUrl(Astro.url);
---

<div class="w-full max-w-4xl mx-auto relative">
  <!-- iOS form styling prevention -->
  <meta name="format-detection" content="telephone=no">
  
  <!-- Success Toast -->
  <Toast className="toast-success !max-w-sm" position="bottom-full" theme="success">
    <Icon type="check" slot="icon" />
  </Toast>

  <!-- Error Toast -->
  <Toast className="toast-error !max-w-sm" position="bottom-full" theme="alert">
    <Icon type="x" slot="icon" />
  </Toast>

  <form
    method="POST"
    action="/api/contact"
    id="contact-form"
    class="contact-form-container space-y-6 bg-white p-8 rounded-xl border border-gray-200 shadow-xl transition-all duration-300"
  >
    <div class="grid grid-cols-1 gap-6 md:grid-cols-2">
      <div>
        <label for="name" class="block text-sm font-medium text-gray-700">
          {lang === 'es' ? 'Nombre' : 'Name'}
        </label>
        <input
          type="text"
          name="name"
          id="name"
          required
          minlength="2"
          class="form-input mt-1 block w-full rounded-lg border border-gray-300 bg-white px-4 py-3 text-gray-900 shadow-sm focus:border-blue-500 focus:ring-2 focus:ring-blue-500/50 transition-colors"
          placeholder={lang === 'es' ? 'Tu nombre' : 'Your name'}
        />
      </div>
      <div>
        <label for="email" class="block text-sm font-medium text-gray-700">Email</label>
        <input
          type="email"
          name="email"
          id="email"
          required
          class="form-input mt-1 block w-full rounded-lg border border-gray-300 bg-white px-4 py-3 text-gray-900 shadow-sm focus:border-blue-500 focus:ring-2 focus:ring-blue-500/50 transition-colors"
          placeholder={lang === 'es' ? 'tu@email.com' : 'your@email.com'}
        />
      </div>
    </div>

    <div>
      <label for="project_type" class="block text-sm font-medium text-gray-700">
        {lang === 'es' ? 'Tipo de proyecto' : 'Project type'}
      </label>
      <select
        id="project_type"
        name="project_type"
        required
        class="form-select mt-1 block w-full rounded-lg border border-gray-300 bg-white px-4 py-3 text-gray-900 shadow-sm focus:border-blue-500 focus:ring-2 focus:ring-blue-500/50 transition-colors"
      >
        <option value="">{lang === 'es' ? 'Selecciona una opción' : 'Select an option'}</option>
        <option value="landing">Landing Page</option>
        <option value="ecommerce">E-commerce</option>
        <option value="web-app">{lang === 'es' ? 'Aplicación Web' : 'Web Application'}</option>
        <option value="other">{lang === 'es' ? 'Otro' : 'Other'}</option>
      </select>
    </div>

    <div>
      <label for="budget" class="block text-sm font-medium text-gray-700">
        {lang === 'es' ? 'Presupuesto aproximado' : 'Approximate budget'}
      </label>
      <select
        id="budget"
        name="budget"
        required
        class="form-select mt-1 block w-full rounded-lg border border-gray-300 bg-white px-4 py-3 text-gray-900 shadow-sm focus:border-blue-500 focus:ring-2 focus:ring-blue-500/50 transition-colors"
      >
        <option value="">{lang === 'es' ? 'Selecciona un rango' : 'Select a range'}</option>
        <option value="500-1000">500€ - 1.000€</option>
        <option value="1000-2500">1.000€ - 2.500€</option>
        <option value="2500-5000">2.500€ - 5.000€</option>
        <option value="5000+">{lang === 'es' ? 'Más de 5.000€' : 'More than 5.000€'}</option>
      </select>
    </div>

    <div>
      <label for="message" class="block text-sm font-medium text-gray-700">
        {lang === 'es' ? 'Mensaje' : 'Message'}
      </label>
      <div class="relative">
        <textarea
          id="message"
          name="message"
          rows="4"
          required
          minlength="10"
          maxlength="500"
          class="form-textarea mt-1 block w-full rounded-lg border border-gray-300 bg-white px-4 py-3 text-gray-900 shadow-sm focus:border-blue-500 focus:ring-2 focus:ring-blue-500/50 transition-colors"
          placeholder={lang === 'es' ? 'Cuéntame sobre tu proyecto...' : 'Tell me about your project...'}
        ></textarea>
        <div class="absolute bottom-2 right-2 text-xs text-gray-500">
          <span id="charCount">0</span>/500
        </div>
      </div>
    </div>

    <div class="flex justify-center">
      <button
        type="submit"
        class="group relative inline-flex items-center justify-center px-8 py-4 text-lg font-semibold text-white bg-blue-600 rounded-lg shadow-lg hover:bg-blue-700 transition-all duration-300 transform hover:scale-105 disabled:opacity-70 disabled:scale-100 disabled:cursor-not-allowed"
      >
        <span class="relative inline-flex items-center gap-2">
          {lang === 'es' ? 'Enviar mensaje' : 'Send message'}
          <svg 
            class="w-5 h-5 transition-transform duration-300 ease-out group-hover:translate-x-1" 
            viewBox="0 0 24 24" 
            fill="none" 
            stroke="currentColor"
          >
            <path 
              stroke-linecap="round" 
              stroke-linejoin="round" 
              stroke-width="2" 
              d="M4 12h16m-4-4l4 4-4 4"
            />
          </svg>
        </span>
      </button>
    </div>
  </form>
</div>

<style>
  :global(.toast-success),
  :global(.toast-error) {
    max-height: fit-content !important;
    height: auto !important;
    padding: 1rem !important;
  }

  /* Target specific form elements with classes */
  .form-input,
  .form-select,
  .form-textarea {
    -webkit-appearance: none !important;
    -moz-appearance: none !important;
    appearance: none !important;
    border-radius: 0.5rem !important;
    font-size: 16px !important;
    background-color: white !important;
    color: #1f2937 !important;
    border: 1px solid #d1d5db !important;
  }

  /* Reset all form control styles first */
  .contact-form-container input,
  .contact-form-container select,
  .contact-form-container textarea,
  .contact-form-container button {
    all: unset;
    box-sizing: border-box;
    font-family: inherit;
  }

  /* Apply base styling for all inputs */
  .contact-form-container input,
  .contact-form-container select,
  .contact-form-container textarea {
    display: block;
    width: 100%;
    padding: 0.75rem 1rem;
    font-size: 16px;
    line-height: 1.5;
    border-radius: 0.5rem;
    border: 1px solid #d1d5db;
    background-color: white;
    color: #1f2937;
    margin-top: 0.25rem;
    transition: border-color 0.2s, box-shadow 0.2s;
  }

  /* Apply specific select styling */
  .contact-form-container select {
    background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%236b7280' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='M6 8l4 4 4-4'/%3e%3c/svg%3e");
    background-position: right 0.5rem center;
    background-repeat: no-repeat;
    background-size: 1.5em;
    padding-right: 2.5rem;
  }
  
  /* Focus states */
  .contact-form-container input:focus,
  .contact-form-container select:focus,
  .contact-form-container textarea:focus {
    outline: none;
    border-color: #3b82f6;
    box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.5);
  }

  /* iOS specific fixes */
  @supports (-webkit-touch-callout: none) {
    .contact-form-container input,
    .contact-form-container select,
    .contact-form-container textarea {
      appearance: none;
      -webkit-appearance: none;
    }
    
    .contact-form-container select {
      -webkit-appearance: none;
      background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%236b7280' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='M6 8l4 4 4-4'/%3e%3c/svg%3e");
    }
  }

  /* Updated button styling */
  .contact-form-container button[type="submit"] {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    -webkit-tap-highlight-color: transparent;
    -webkit-touch-callout: none;
    -webkit-user-select: none;
    user-select: none;
    outline: none !important;
    position: relative;
    isolation: isolate;
    cursor: pointer;
    /* border: 1px solid rgba(255, 255, 255, 0.1); */
  }

  .contact-form-container button[type="submit"]::after {
    content: '';
    position: absolute;
    inset: -1px;
    background: linear-gradient(to right, rgba(139, 92, 246, 0.5), rgba(236, 72, 153, 0.5), rgba(234, 179, 8, 0.5));
    filter: blur(8px);
    z-index: -1;
    border-radius: 9999px;
    opacity: 0;
    transition: opacity 0.3s ease;
  }

  .contact-form-container button[type="submit"]:hover::after {
    opacity: 1;
  }

  /* Loading state */
  .contact-form-container button[type="submit"][disabled] {
    background: linear-gradient(to right, rgba(139, 92, 246, 0.5), rgba(236, 72, 153, 0.5), rgba(234, 179, 8, 0.5));
  }

  /* Mobile adjustments */
  @media (max-width: 640px) {
    .contact-form-container button[type="submit"] {
      padding: 0.625rem 1.25rem;
      font-size: 0.875rem;
    }
  }

  
  /* Body class when iOS keyboard is open */
  :global(body.ios-keyboard-open) {
    position: fixed;
    width: 100%;
    height: 100%;
  }

  /* Enhanced mobile input styling */
  .contact-form-container input,
  .contact-form-container select,
  .contact-form-container textarea {
    -webkit-appearance: none !important;
    -moz-appearance: none !important;
    appearance: none !important;
    display: block;
    width: 100%;
    padding: 0.75rem 1rem;
    font-size: 16px !important; /* Force 16px to prevent zoom on iOS */
    line-height: 1.5;
    border-radius: 0.5rem;
    border: 1px solid #d1d5db;
    background-color: white !important;
    color: #1f2937 !important;
    margin-top: 0.25rem;
    transform: translateZ(0); /* Fix for mobile webkit rendering */
  }

  /* Specific select styling for mobile */
  .contact-form-container select {
    background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%236b7280' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='M6 8l4 4 4-4'/%3e%3c/svg%3e");
    background-position: right 0.5rem center;
    background-repeat: no-repeat;
    background-size: 1.5em;
    padding-right: 2.5rem;
  }

  /* Enhanced focus states for mobile */
  .contact-form-container input:focus,
  .contact-form-container select:focus,
  .contact-form-container textarea:focus {
    outline: none !important;
    border-color: #3b82f6 !important;
    box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.5) !important;
    -webkit-box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.5) !important;
  }

  /* Remove button styling */
  .contact-form-container button[type="submit"] {
    -webkit-tap-highlight-color: transparent;
    -webkit-touch-callout: none;
    -webkit-user-select: none;
    user-select: none;
    outline: none !important;
  }

  /* iOS focus state */
  .ios-focus {
    background-color: white !important;
    color: #1f2937 !important;
    border-color: #3b82f6 !important;
  }
</style>

<script>
  import { toast, setDefaultTimeout } from 'webcoreui';
  
  setDefaultTimeout(5000);
  const form = document.getElementById('contact-form');
  const submitButton = form?.querySelector('button[type="submit"]');
  const originalButtonText = submitButton?.querySelector('span')?.textContent || '';
  
  // Character counter for message
  const messageTextarea = document.getElementById('message');
  const charCount = document.getElementById('charCount');
  
  messageTextarea?.addEventListener('input', () => {
    if (charCount) {
      charCount.textContent = (messageTextarea as HTMLTextAreaElement).value.length.toString();
    }
  });

  form?.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    if (!submitButton) return;
    
    // Set loading state
    submitButton.setAttribute('disabled', 'true');
    const loadingSpan = submitButton.querySelector('span');
    if (loadingSpan) {
      loadingSpan.textContent = 'Sending...';
    }
    submitButton.classList.add('opacity-75');
    
    const formData = new FormData(e.target as HTMLFormElement);
    console.log('Submitting form to /api/contact');

    try {
      const response = await fetch('/api/contact', {
        method: 'POST',
        body: formData,
      });

      // Log response status for debugging
      console.log('Response status:', response.status);
      
      let result: { success: boolean; message?: string; error?: string; title?: string };
      try {
        result = await response.json();
      } catch (jsonError) {
        console.error('Failed to parse JSON response:', jsonError);
        throw new Error('Invalid server response');
      }
      
      // Log the result for debugging
      console.log('Response result:', result);
      
      if (result.success) {
        toast({
          element: '.toast-success',
          title: result.title,
          content: result.message,
          position: 'bottom-full',
        });
        (e.target as HTMLFormElement).reset();
        if (charCount) charCount.textContent = '0';
      } else {
        toast({
          element: '.toast-error',
          title: result.title || 'Error',
          content: result.error || 'Failed to send message',
          position: 'bottom-full',
        });
      }
    } catch (error) {
      console.error('Form submission error:', error);
      toast({
        element: '.toast-error',
        title: 'Error',
        content: 'Unable to process your request. Please try again later.',
        position: 'bottom-full',
      });
    } finally {
      // Reset button state
      submitButton.removeAttribute('disabled');
      const span = submitButton.querySelector('span');
      if (span) {
        span.textContent = originalButtonText;
      }
      submitButton.classList.remove('opacity-75');
    }
  });
  
  // Fix for iOS form inputs styling
  if (/iPad|iPhone|iPod/.test(navigator.userAgent)) {
    const inputs = document.querySelectorAll('input, select, textarea');
    inputs.forEach(input => {
      input.addEventListener('focus', function() {
        document.body.classList.add('ios-keyboard-open');
        this.classList.add('ios-focus');
      });
      
      input.addEventListener('blur', function() {
        document.body.classList.remove('ios-keyboard-open');
        this.classList.remove('ios-focus');
      });
    });
  }
</script>

<!-- Inline reset script for iOS -->
<script is:inline>
  // Force iOS to use our styles
  if (/iPad|iPhone|iPod/.test(navigator.userAgent)) {
    document.addEventListener('DOMContentLoaded', function() {
      const inputs = document.querySelectorAll('input, select, textarea');
      inputs.forEach(input => {
        // Reset iOS styling by toggling focus briefly
        setTimeout(() => {
          input.focus();
          setTimeout(() => input.blur(), 1);
        }, 100);
      });
    });
  }
</script>

<!-- Add this script at the end of your existing scripts -->
<script>
  // Prevent zoom on focus for iOS devices
  const addMaximumScaleToMetaViewport = () => {
    const el = document.querySelector('meta[name=viewport]');
    if (el !== null) {
      let content = el.getAttribute('content');
      let re = /maximum\-scale=[0-9\.]+/g;
      if (re.test(content)) {
          content = content.replace(re, 'maximum-scale=1.0');
      } else {
          content = [content, 'maximum-scale=1.0'].join(', ')
      }
      el.setAttribute('content', content);
    }
  };
  
  // Apply on page load
  addMaximumScaleToMetaViewport();
</script>
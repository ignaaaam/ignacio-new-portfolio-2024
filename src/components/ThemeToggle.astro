---
// Theme Toggle Component - Responsive and Accessible
---

<button
  id="theme-toggle"
  type="button"
  class="inline-flex items-center justify-center p-2.5 sm:p-3 text-gray-700 dark:text-gray-300 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-700 hover:text-blue-600 dark:hover:text-blue-400 transition-all duration-200 border border-gray-200 dark:border-gray-600 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800 min-w-[44px] min-h-[44px]"
  aria-label="Toggle dark mode"
  title="Toggle dark/light mode"
>
  <!-- Sun Icon (Light Mode) -->
  <svg
    id="theme-toggle-light-icon"
    class="hidden w-5 h-5 sm:w-6 sm:h-6"
    fill="currentColor"
    viewBox="0 0 20 20"
    xmlns="http://www.w3.org/2000/svg"
    aria-hidden="true"
  >
    <path
      fill-rule="evenodd"
      d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z"
      clip-rule="evenodd"
    ></path>
  </svg>
  
  <!-- Moon Icon (Dark Mode) -->
  <svg
    id="theme-toggle-dark-icon"
    class="w-5 h-5 sm:w-6 sm:h-6"
    fill="currentColor"
    viewBox="0 0 20 20"
    xmlns="http://www.w3.org/2000/svg"
    aria-hidden="true"
  >
    <path d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z"></path>
  </svg>
</button>

<!-- Theme Transition Overlay -->
<div
  id="theme-transition-overlay"
  class="fixed pointer-events-none z-10 opacity-0"
  style="
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    background: radial-gradient(circle at 0px 0px, var(--transition-color, #000) 0%, transparent 70%);
    transform: scale(0);
    transform-origin: 0 0;
  "
></div>

<script>
  class ThemeToggle {
    constructor() {
      this.button = null;
      this.lightIcon = null;
      this.darkIcon = null;
      this.overlay = null;
      this.isInitialized = false;
      
      this.init();
    }

    init() {
      // Wait for DOM to be ready
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => this.setup());
      } else {
        this.setup();
      }
    }

    setup() {
      this.button = document.getElementById('theme-toggle');
      this.lightIcon = document.getElementById('theme-toggle-light-icon');
      this.darkIcon = document.getElementById('theme-toggle-dark-icon');
      this.overlay = document.getElementById('theme-transition-overlay');

      if (!this.button || !this.lightIcon || !this.darkIcon || !this.overlay) {
        console.warn('Theme toggle elements not found');
        return;
      }

      // Set initial theme
      this.setTheme(this.getCurrentTheme());
      
      // Add event listener
      this.button.addEventListener('click', () => this.toggleTheme());
      
      // Listen for system theme changes
      this.watchSystemTheme();
      
      this.isInitialized = true;
    }

    getCurrentTheme() {
      const savedTheme = localStorage.getItem('color-theme');
      if (savedTheme) {
        return savedTheme;
      }
      
      // Check system preference
      return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
    }

    setTheme(theme, withAnimation = false) {
      const isDark = theme === 'dark';
      
      if (withAnimation) {
        this.animateThemeChange(isDark);
      } else {
        // Update document class immediately
        if (isDark) {
          document.documentElement.classList.add('dark');
        } else {
          document.documentElement.classList.remove('dark');
        }
      }
      
      // Update localStorage
      localStorage.setItem('color-theme', theme);
      
      // Update icons
      this.updateIcons(isDark);
    }

    updateIcons(isDark) {
      if (isDark) {
        this.lightIcon.classList.remove('hidden');
        this.darkIcon.classList.add('hidden');
      } else {
        this.lightIcon.classList.add('hidden');
        this.darkIcon.classList.remove('hidden');
      }
    }

    toggleTheme() {
      const currentTheme = this.getCurrentTheme();
      const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
      this.setTheme(newTheme, true);
    }

    watchSystemTheme() {
      const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');
      
      mediaQuery.addEventListener('change', (e) => {
        // Only update if user hasn't set a preference
        if (!localStorage.getItem('color-theme')) {
          this.setTheme(e.matches ? 'dark' : 'light');
        }
      });
    }

    animateThemeChange(isDark) {
      // Add CSS transition to html element for smooth theme change
      document.documentElement.style.transition = 'background-color 0.6s ease, color 0.6s ease';
      
      // Set the transition color
      const transitionColor = isDark ? '#111827' : '#ffffff'; // dark gray-900 : white
      this.overlay.style.setProperty('--transition-color', transitionColor);
      
      // Calculate the diagonal distance from top-left to bottom-right
      const maxDistance = Math.sqrt(window.innerWidth ** 2 + window.innerHeight ** 2);
      const scaleFactor = maxDistance / 100; // Scale factor to cover entire screen
      
      // Reset overlay position and styling
      this.overlay.style.top = '0';
      this.overlay.style.left = '0';
      this.overlay.style.width = '100vw';
      this.overlay.style.height = '100vh';
      this.overlay.style.transformOrigin = '0 0';
      this.overlay.style.background = `radial-gradient(circle at 0px 0px, ${transitionColor} 0%, transparent 80%)`;
      this.overlay.style.mixBlendMode = 'normal';
      
      // Start the animation
      this.overlay.style.opacity = '0.85';
      this.overlay.style.transform = 'scale(0)';
      this.overlay.style.transition = 'none';
      
      // Force reflow
      this.overlay.offsetHeight;
      
      // Change theme early for smoother transition
      setTimeout(() => {
        if (isDark) {
          document.documentElement.classList.add('dark');
        } else {
          document.documentElement.classList.remove('dark');
        }
      }, 150);
      
      // Animate the scale with smoother, longer transition
      this.overlay.style.transition = 'transform 1.2s cubic-bezier(0.25, 0.1, 0.25, 1), opacity 1.2s ease-out';
      this.overlay.style.transform = `scale(${scaleFactor})`;
      
      // Gradually fade out overlay as it expands
      setTimeout(() => {
        this.overlay.style.opacity = '0';
      }, 600);
      
      // Reset overlay after animation
      setTimeout(() => {
        this.overlay.style.transform = 'scale(0)';
        this.overlay.style.transition = 'none';
        this.overlay.style.opacity = '0';
        // Remove transition from html element
        document.documentElement.style.transition = '';
      }, 1200);
    }
  }

  // Initialize theme toggle
  const themeToggle = new ThemeToggle();

  // Re-initialize on Astro page transitions
  document.addEventListener('astro:after-swap', () => {
    if (!themeToggle.isInitialized) {
      themeToggle.init();
    }
  });
</script>